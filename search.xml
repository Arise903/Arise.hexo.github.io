<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/06/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>关于我</title>
    <url>/2024/06/21/about/me/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>iOS APP重签过程记录</title>
    <url>/2024/06/21/iOS/iOS-APP%E9%87%8D%E7%AD%BE%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p><em>废话开篇：记录一下微信重签流水账，感兴趣的朋友可以试一下</em></p>
</blockquote>
<h4 id="一、包下载地址"><a href="#一、包下载地址" class="headerlink" title="一、包下载地址"></a>一、包下载地址</h4><p><a href="https://link.juejin.cn/?target=https://pan.baidu.com/s/1Sk5mOypeOklkeZ2nyNY7dQ" title="https://pan.baidu.com/s/1Sk5mOypeOklkeZ2nyNY7dQ">8.0.49 版本下载地址</a><br>提取密码： <strong>m8c4</strong></p>
<h4 id="二、准备工具"><a href="#二、准备工具" class="headerlink" title="二、准备工具"></a>二、准备工具</h4><h5 id="1、重签工具"><a href="#1、重签工具" class="headerlink" title="1、重签工具"></a>1、重签工具</h5><p><strong>APP Signer</strong></p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7dfeac30e3214a0b9469aae97ce7081d~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=240&h=240&s=42076&e=png&b=b56306" alt="image.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h5 id="2、修改国际化APP名字工具"><a href="#2、修改国际化APP名字工具" class="headerlink" title="2、修改国际化APP名字工具"></a>2、修改国际化APP名字工具</h5><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f812df08fb14d9c932225223fe3b05f~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=238&h=234&s=51505&e=png&b=b65307" alt="image.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>因为APP的名字可能是本地国际化文件配置的，所以，仅修改 <strong>info.plist</strong> 文件里面的 <strong>Bundle display name</strong> 是不能变更成功的</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b44d9ef567e248e4ab31443db289ee3e~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=984&h=390&s=82274&e=png&b=fdfdfd" alt="image.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>利用 <strong>PlistEdit Pro</strong> 工具打开上面的文件如图：</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7095b60d703d4067ae6f5036c1e8e873~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1254&h=954&s=380078&e=png&b=fcf9f9" alt="image.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>修改里面的 <strong>CFBundleDisplayName</strong> 的名即可，这样新签名的应用才能展示设置的名称。</p>
<h4 id="三、签名注意事项"><a href="#三、签名注意事项" class="headerlink" title="三、签名注意事项"></a>三、签名注意事项</h4><h5 id="1、ipa-删除部分文件"><a href="#1、ipa-删除部分文件" class="headerlink" title="1、ipa 删除部分文件"></a>1、ipa 删除部分文件</h5><p>将 <strong>ipa</strong> 包直接改为 <strong>.zip</strong> 格式结尾，然后查看包内容，</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ab59d6e662b4b398ef3d3686abfd91a~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=670&h=382&s=75665&e=png&b=f4f1f0" alt="image.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>删除里面的 <strong>PlugIns</strong> 和 <strong>Watch</strong> 文件夹（如果用自建签名证书的话，这两个文件里的 info.plist 文件也要修改，但是即使改了，也不会签名成功，无法安装，试过N次）</p>
<p>整理完后，将 <strong>zip</strong> 文件格式改为 <strong>ipa</strong>，然后进行下一步自建证书签名操作。</p>
<h5 id="2、修改-info-plist-文件里的-BundleId"><a href="#2、修改-info-plist-文件里的-BundleId" class="headerlink" title="2、修改 info.plist 文件里的 BundleId"></a>2、修改 info.plist 文件里的 BundleId</h5><p>将里面的 <strong>BundleId</strong> 修改为与自建描述文件里对应。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de37fd2bab4b46c085dade83d3f5dea4~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=242&h=220&s=16129&e=png&b=fbfbfb" alt="image.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h5 id="3、自建证书签名"><a href="#3、自建证书签名" class="headerlink" title="3、自建证书签名"></a>3、自建证书签名</h5><p>准备 <strong>iOS</strong> 开发证书及描述文件，利用 <strong>APP Signer</strong> 进行重签</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/364147f8d2474665a2c084646c6552f4~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1412&h=562&s=184712&e=png&b=f4f0ef" alt="image.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>把前三项（待签名的 <strong>ipa</strong> 包、自建开发证书、描述文件）填完就点击右下角的 <strong>Start</strong> 开始签名就行了。</p>
<p>利用 <strong>xcode</strong> 的 <strong>Devices</strong> 工具，安装重签包</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f51fc86690e146c28dd231f3fbc048a0~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1180&h=730&s=92591&e=png&b=f5f1f0" alt="image.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h4 id="四、总结与思考"><a href="#四、总结与思考" class="headerlink" title="四、总结与思考"></a>四、总结与思考</h4><p>爱思助手的签名工具试过，但自建证书签完后的 <strong>app</strong> 与 应用商店下载的不能同时存在。因此，记个流水帐加深一下记忆。没啥复杂的东西（主要是也没深入研究），希望能帮助到大家。</p>
<p>本文转自 <a href="https://juejin.cn/post/7382107891400146996?utm_source=gold_browser_extension">https://juejin.cn/post/7382107891400146996?utm_source=gold_browser_extension</a>，如有侵权，请联系删除。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>实现iOS App代码混淆</title>
    <url>/2024/06/21/iOS/%E5%AE%9E%E7%8E%B0iOS%20App%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在开发iOS应用程序时，保护代码安全是至关重要的。代码混淆是一种常用的技术，可以增加逆向工程的难度，防止他人对代码的篡改和盗用。本文将介绍如何实现iOS App代码混淆的步骤和操作方法。</p>
<h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><p>下面是实现iOS App代码混淆的整体流程：</p>
<p>接下来，我们将逐步介绍每个步骤的具体操作，并提供相应的代码示例和案例演示。</p>
<h2 id="选择合适的代码混淆工具"><a href="#选择合适的代码混淆工具" class="headerlink" title="选择合适的代码混淆工具"></a>选择合适的代码混淆工具</h2><p>在iOS开发中，有多种代码混淆工具可供选择。以下是一些常用的代码混淆工具：</p>
<ul>
<li><a href="https://link.juejin.cn/?target=https://ipaguard.com/" title="https://ipaguard.com/">ipaguard</a></li>
<li><a href="https://link.juejin.cn/?target=https://github.com/obfuscator-llvm/obfuscator" title="https://github.com/obfuscator-llvm/obfuscator">Obfuscator-LLVM</a></li>
<li><a href="https://link.juejin.cn/?target=https://www.preemptive.com/products/dotfuscator" title="https://www.preemptive.com/products/dotfuscator">Dotfuscator</a></li>
</ul>
<p>根据具体需求，选择一个适合的工具，并按照其官方文档进行安装和配置。</p>
<h2 id="配置代码混淆工具"><a href="#配置代码混淆工具" class="headerlink" title="配置代码混淆工具"></a>配置代码混淆工具</h2><p>一旦选择了代码混淆工具，接下来需要进行配置。配置的具体内容会因工具而异，但通常包括以下几个步骤：</p>
<ol>
<li>创建一个混淆配置文件，用于指定要混淆的文件、类、方法等。以下是一个示例配置文件的结构：</li>
</ol>
<p>xml</p>
<p>复制代码</p>
<p><code>&lt;configuration&gt;   &lt;options&gt;     &lt;!-- 混淆选项 --&gt;   &lt;/options&gt;   &lt;input&gt;     &lt;!-- 输入文件/目录 --&gt;   &lt;/input&gt;   &lt;output&gt;     &lt;!-- 输出目录 --&gt;   &lt;/output&gt; &lt;/configuration&gt;</code></p>
<ol>
<li>在配置文件中设置需要混淆的选项，例如重命名类、方法和变量，删除无用的代码等。不同的工具会有不同的选项，可以根据具体需求进行配置。</li>
<li>指定要混淆的输入文件或目录，以及输出目录。输入文件通常是应用程序的二进制文件，输出目录是将混淆后的代码生成的位置。</li>
</ol>
<h2 id="执行代码混淆"><a href="#执行代码混淆" class="headerlink" title="执行代码混淆"></a>执行代码混淆</h2><p>完成配置后，可以执行代码混淆操作。具体操作方式也因工具而异，但通常是通过命令行或图形界面来执行。</p>
<p>以下是一个使用Obfuscator-LLVM工具进行代码混淆的示例：</p>
<p>arduino</p>
<p>复制代码</p>
<p><code>$ obfuscator-llvm --config config.xml</code></p>
<h2 id="验证混淆结果"><a href="#验证混淆结果" class="headerlink" title="验证混淆结果"></a>验证混淆结果</h2><p>执行代码混淆后，需要验证混淆结果是否符合预期。这可以通过反编译混淆后的应用程序并检查代码是否变得更加复杂和难以阅读来完成。</p>
<p>以混淆工具-ipaguard为例；</p>
<p>下载ipa代码混淆保护工具Ipa Guard是一款功能强大的ipa混淆工具，不需要ios app源码，直接对ipa文件进行混淆加密。不限制OC，Swift，Flutter，React Native，H5类app。工具跨平台版，windows,linux,mac系统都可用直接去官网下载<a href="https://link.juejin.cn/?target=https://www.ipaguard.com" title="https://www.ipaguard.com">www.ipaguard.com</a></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60c1263ad28d4d87b382893f5eefe47c~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=919&h=590&s=209253&e=png&b=fefcfc" alt="在这里插入图片描述"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>获取ipaguard登录码双击ipaguard.exe启动ipaguard后点击右上角的登录按钮，输入邮箱后，没登录码的点击获取登录码，有的可以直接输入登录码</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff8ee4e056be4dbabe04ab55afe46279~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=916&h=584&s=148177&e=png&b=7f7f7f" alt="在这里插入图片描述"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>代码混淆Ipa Guard可以对ipa文件中的类、方法、方法参数、变量等进行全面修改混淆，使其名称成为没有意义的乱码，极大地增加应用破解的难度。 选择要处理的ipa文件，点击左侧的代码菜单，里面可以分别对oc类，方法，swift类，方法等进行选择配置要处理的内容</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83b79a21fe3f4e6b8555ce657543ccd7~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=995&h=635&s=176327&e=png&b=fefefe" alt="在这里插入图片描述"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>文件混淆Ipa Guard代码混淆工具支持对代码中的各种资源图片、js、mp3、xib、sb、json、html等名称进行修改，使其变得无意义，增加破解ipa的难度。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6fa3021597e6448ab9d4438c4c1a8b04~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=974&h=616&s=149630&e=png&b=fefefe" alt="在这里插入图片描述"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>IPA重签名与安装测试ipaguard有签名和重签名功能，能在windows，mac，和linux上运行。在对ipa进行混淆和保护后，可以直接通过签名安装到测试手机，非常的方便测试检查混淆后的效果。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d822cfc675840dc91d705233109efe9~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=930&h=603&s=125334&e=png&b=fefefe" alt="在这里插入图片描述"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>本文转自 <a href="https://juejin.cn/post/7357735854717583372">https://juejin.cn/post/7357735854717583372</a>，如有侵权，请联系删除。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>iOS隐私清单API检测</title>
    <url>/2024/06/21/iOS/iOS%E9%9A%90%E7%A7%81%E6%B8%85%E5%8D%95API%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<h1 id="iOS隐私清单API检测"><a href="#iOS隐私清单API检测" class="headerlink" title="iOS隐私清单API检测"></a>iOS隐私清单API检测</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在 WWDC23 上苹果引入了常用第三方 SDK 的新隐私声明和签名，并宣布开发者需要在其应用的隐私声明中声明使用一组 API 的批准理由。这些变更有助于开发者更好地了解第三方 SDK 如何使用数据、保护软件依赖关系，并为用户提供额外的隐私保护。</p>
<p>从3月13日开始：如果你向 App Store Connect 上传新应用或更新应用，并且使用了需要批准理由的 API，苹果将通过电子邮件通知您您的应用隐私声明中缺少理由。这是在 App Store Connect 现有通知的基础上增加的。</p>
<p>从5月1日开始：你需要在上传新应用或更新应用至 App Store Connect 时，包括列出的 API 的批准理由。如果您未按允许的理由使用 API，请寻找替代方案。如果您添加了一个位于常用第三方 SDK 列表中的新第三方 SDK，这些 API、隐私声明和签名要求将适用于该 SDK。确保使用包含隐私声明的 SDK 版本，并注意，当 SDK 作为二进制依赖添加时，也需要签名。</p>
<p>参照：</p>
<ul>
<li><p><a href="https://link.juejin.cn/?target=https://developer.apple.com/news/?id=r1henawx" title="https://developer.apple.com/news/?id=r1henawx">Privacy updates for App Store submissions - Latest News - Apple Developer</a></p>
</li>
<li><p><a href="https://link.juejin.cn/?target=https://developer.apple.com/news/?id=3d8a9yyh" title="https://developer.apple.com/news/?id=3d8a9yyh">Privacy updates for App Store submissions - Latest News - Apple Developer</a></p>
</li>
</ul>
<h2 id="问题以及方案"><a href="#问题以及方案" class="headerlink" title="问题以及方案"></a>问题以及方案</h2><p>通过上面的内容我们可以看出：</p>
<ul>
<li><p>第三方的SDK需要添加隐私清单，对于活跃的开源库来说开源作者（团队）都已经做好了调整，我们只需要更新一下版本即可，但是对于那些不活跃的开源库来说，我们需要fork一下项目，自行添加隐私清单。当然对于维护私有库的团队来说这也是个体力活，幸好我们可以先优先处理<a href="https://link.juejin.cn/?target=">苹果官方清单</a>列举的部分;</p>
</li>
<li><p>当SDK作为二进制依赖（其他方式来看目前并不需要）添加时，需要签名，具体的签名可以参照[WWDC2023视频](<a href="https://link.juejin.cn/?target=https://developer.apple.com/videos/play/wwdc2023/10061" title="https://developer.apple.com/videos/play/wwdc2023/10061">Verify app dependencies with digital signatures - WWDC23 - Videos - Apple Developer</a>)。</p>
</li>
</ul>
<p>通过查看具体的隐私清单要求得知，我们主要需要添加两项内容，隐私数据以及API调用，隐私数据和我们之前在App Store审核中的App隐私数据部分是一致的，对于这部分数据似乎只能自行判断并添加相关内容，但是对于API的调用还是可以通过脚本做相应的检测，毕竟我们并不能在编码时还能够记住是否使用了相关的API。</p>
<p>参照：</p>
<p><a href="https://link.juejin.cn/?target=https://developer.apple.com/documentation/bundleresources/privacy_manifest_files" title="https://developer.apple.com/documentation/bundleresources/privacy_manifest_files">Privacy manifest files | Apple Developer Documentation</a></p>
<h2 id="API检测"><a href="#API检测" class="headerlink" title="API检测"></a>API检测</h2><p>为了能够保证我们在更新代码之后判断是否有调用相关的隐私清单API，我写了一个脚本用来检测项目中API的调用和<code>PrivacyInfo.xcprivacy</code>文件中的声明是否一致，可以将以下文件放在项目目录下，在终端运行或者添加到Xcode script中。</p>
<blockquote>
<p>注意：Xcode执行报错：Operation not permitted，前往Build Settings，User Script Sandboxing值修改为No。</p>
</blockquote>
<p>paapi.txt</p>
<p>复制代码</p>
<p><code>NSPrivacyAccessedAPIType:NSPrivacyAccessedAPICategoryFileTimestamp NSFileCreationDate .creationDateKey NSFileModificationDate fileModificationDate NSURLContentModificationDateKey .contentModificationDateKey NSURLCreationDateKey .creationDateKey getattrlist getattrlistbulk fgetattrlist st_atimespec st_blksize st_blocks st_ctimespec st_dev st_flags st_gen st_gid st_ino st_lspare st_mode st_mtimespec st_nlink st_qspare st_rdev st_size st_uid fstat fstatat lstat getattrlistat NSPrivacyAccessedAPIType:NSPrivacyAccessedAPICategorySystemBootTime systemUptime mach_absolute_time NSPrivacyAccessedAPIType:NSPrivacyAccessedAPICategoryDiskSpace NSURLVolumeAvailableCapacityKey .volumeAvailableCapacityKey NSURLVolumeAvailableCapacityForImportantUsageKey .volumeAvailableCapacityForImportantUsageKey NSURLVolumeAvailableCapacityForOpportunisticUsageKey .volumeAvailableCapacityForOpportunisticUsageKey NSURLVolumeTotalCapacityKey .volumeTotalCapacityKey NSFileSystemFreeSize .systemFreeSize NSFileSystemSize .systemSize statfs statvfs fstatfs fstatvfs getattrlist fgetattrlist getattrlistat NSPrivacyAccessedAPIType:NSPrivacyAccessedAPICategoryActiveKeyboards activeInputModes NSPrivacyAccessedAPIType:NSPrivacyAccessedAPICategoryUserDefaults NSUserDefaults UserDefaults</code></p>
<p><code>paapi.txt</code>文件主要包含隐私清单中列举的<code>API</code>。</p>
<p>paapidetect.sh</p>
<p>复制代码</p>
<p><code>#!/bin/bash # PrivacyInfo.xcprivacy file path privacy_info_file_path=&quot;&quot; number_of_process=4 # The number of files processed each time number_of_files=10 # Parsing named parameters while [[ &quot;$#&quot; -gt 0 ]]; do     case $1 in         --ppath|-pp) privacy_info_file_path=&quot;$2&quot;; shift ;;         --nprocess|-np) number_of_process=&quot;$2&quot;; shift ;;         --nfiles|-nf) number_of_files=&quot;$2&quot;; shift ;;         *) echo &quot;Unknown parameter passed: $1&quot;; exit 1 ;;     esac     shift done # Specify the current directory as the search directory search_directory=&quot;.&quot; api_file_path=&quot;paapi.txt&quot; # Check if the file exists if [ ! -f &quot;$api_file_path&quot; ]; then   echo &quot;💥Error: paapi.txt file not found in the current directory.&quot;   exit 1 fi api_type=&quot;&quot; result_type=&quot;&quot; error_found=0  # Read each line from the file and perform a search operation while IFS= read -r search_text; do   # Check if the search string starts with &quot;NSPrivacyAccessedAPIType:*&quot;   if [[ $search_text == NSPrivacyAccessedAPIType:* ]]; then       api_type=&quot;$&#123;search_text#*:&#125;&quot;       # Reset result_type when the type changes       result_type=&quot;&quot;       echo &quot;🌟APIType: $&#123;api_type&#125;🔅&quot;   else     # Check if the search string is not empty or does not consist only of spaces     if [ -n &quot;$(echo &quot;$search_text&quot; | tr -d &#39;[:space:]&#39;)&quot; ]; then       # Process the search string to preserve spaces       formatted_search_text=$(printf &quot;%s&quot; &quot;$search_text&quot;)       # Initialize an empty string to collect results       all_results=&quot;&quot;       all_results_echo=&quot;&quot;       # Use find command to search and grep to match the search string       result=$(find &quot;$search_directory&quot; \( -path &quot;./Pods&quot; -o -path &quot;./Tests&quot; \) -prune -o \       -type f \( -name &quot;*.h&quot; -o -name &quot;*.m&quot; -o -name &quot;*.mm&quot; -o -name &quot;*.swift&quot; \) \       -print0 | xargs -0 -P 4 -n 10 grep -wH &quot;$search_text&quot;)       if [ -n &quot;$result&quot; ]; then         # Check if the corresponding Type is in the PrivacyInfo.xcprivacy file         if [ -z &quot;$privacy_info_file_path&quot; ]; then           privacy_info_file_path=$(find &quot;$search_directory&quot; \( -path &quot;./Pods&quot; -o -path &quot;./Tests&quot; \) -prune -o \           -type f -name &quot;*xcprivacy&quot; -print -quit)         fi         if [ -n &quot;$privacy_info_file_path&quot; ]; then           if [ -z &quot;$result_type&quot; ]; then             # Assign value when result_type is empty             result_type=$(grep -H &quot;$api_type&quot; &quot;$privacy_info_file_path&quot;)           fi         fi         # Accumulate results         all_results=&quot;$all_results$result&quot;                  # Accumulate result output         if [ -n &quot;$all_results_echo&quot; ]; then           # Only add a newline if all_results is not empty           all_results_echo=&quot;$&#123;all_results_echo&#125;\n&quot;         fi         all_results_echo=&quot;$all_results_echo$result&quot;       fi       # Check if any results were accumulated       if [ -n &quot;$all_results&quot; ]; then         echo &quot;🔥Files using &#39;$&#123;search_text&#125;&#39;:&quot;         echo &quot;$all_results_echo&quot;         if [ -z &quot;$result_type&quot; ]; then           error_found=1           echo &quot;💥Error: PrivacyInfo.xcprivacy file did not include NSPrivacyAccessedAPIType:$&#123;api_type&#125;.&quot;         else           echo &quot;🍀Success: PrivacyInfo.xcprivacy has included NSPrivacyAccessedAPIType:$&#123;api_type&#125;.&quot;         fi       else         echo &quot;💨&#39;$&#123;search_text&#125;&#39; was not used.&quot;       fi     fi   fi done &lt; &quot;$api_file_path&quot; # Check if any errors were found if [ &quot;$error_found&quot; -eq 1 ]; then   exit 1 fi</code></p>
<p><code>paapidetect.sh</code>检测项目中是否调用隐私清单中的<code>API</code>并检查<code>PrivacyInfo.xcprivacy</code>文件中是否有包含对应的<code>NSPrivacyAccessedAPIType</code>。</p>
<ul>
<li><p>支持输出相关隐私清单<code>API</code>是否调用以及输出调用的部分；</p>
</li>
<li><p>支持检测<code>PrivacyInfo.xcprivacy</code>文件中是否有包含对应的<code>Type</code>，对应<code>Reason</code>需要自行判断；</p>
</li>
<li><p>支持设置调用参数。</p>
<ul>
<li><p><code>--ppath</code>或<code>-pp</code>设置<code>PrivacyInfo.xcprivacy</code>文件相对路径，如果不设置会默认查找项目目录下的首个<code>.xcprivacy</code>文件，因此此脚本并不适合检测有多个<code>.xcprivacy</code>文件的项目，例如你想一次性检测工程中使用pod导入的所有依赖库。当然并不建议如此操作，此脚本更建议放在各个依赖库下，检测工作交给各依赖库来做，而且脚本中排除了<code>Pod</code>以及<code>Test</code>文件夹的扫描。当然如果你仅仅是想看一下工程以及依赖库下对于隐私<code>API</code>的使用，可以移除脚本中的<code>( -path &quot;./Pods&quot; -o -path &quot;./Tests&quot; ) -prune -o</code>。</p>
</li>
<li><p><code>--nprocess</code>或<code>-np</code>设置进程个数，<code>--nfiles</code>或<code>-nf</code>设置一次扫描文件个数。</p>
</li>
</ul>
</li>
</ul>
<p>参照</p>
<p><a href="https://juejin.cn/post/7329732000087425064" title="https://juejin.cn/post/7329732000087425064">iOS17 隐私协议适配详解 - 掘金</a></p>
<p>本文转自 <a href="https://juejin.cn/post/7356888527656534051">https://juejin.cn/post/7356888527656534051</a>，如有侵权，请联系删除。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>SwiftUI 中如何使用 SFSafariViewController 显示网页</title>
    <url>/2024/06/21/iOS/SwiftUI%20%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20SFSafariViewController%20%E6%98%BE%E7%A4%BA%E7%BD%91%E9%A1%B5/</url>
    <content><![CDATA[<p><strong>这里每天分享一个 iOS 的新知识，快来关注我吧</strong></p>
<p>前言</p>
<p>之前讲过如何在项目中使用 SFSafariViewController，但那个是 Swift 版的，今天看到有人问如何在 SwiftUI 中使用 SFSafariViewController，虽然在 Swift UIKit 中很容易使用，但是在 SwiftUI 中还是有些难度的，今天就来稍微讲讲。</p>
<p><a href="https://link.juejin.cn/?target=https://link.zhihu.com/?target=http%253A//mp.weixin.qq.com/s%253F__biz%253DMzg3MDk3NzUzNw%253D%253D%2526mid%253D2247484282%2526idx%253D1%2526sn%253D693bdee8862280e1b3dada2fdbe5e18b%2526chksm%253Dce84da14f9f353026681ea6688cbf21c188cebd203ea2ffd3b06c59680d8ba759214f444e424%2526scene%253D21%2523wechat_redirect" title="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzg3MDk3NzUzNw%3D%3D%26mid%3D2247484282%26idx%3D1%26sn%3D693bdee8862280e1b3dada2fdbe5e18b%26chksm%3Dce84da14f9f353026681ea6688cbf21c188cebd203ea2ffd3b06c59680d8ba759214f444e424%26scene%3D21%23wechat_redirect">如何在项目中使用 SFSafariViewController</a></p>
<h3 id="为-SFSafariViewController-创建-SwiftUI-包装器"><a href="#为-SFSafariViewController-创建-SwiftUI-包装器" class="headerlink" title="为 SFSafariViewController 创建 SwiftUI 包装器"></a>为 SFSafariViewController 创建 SwiftUI 包装器</h3><p>其实 SwiftUI 并没有直接提供 SFSafariViewController 这个组件，那么在 SwiftUI 中使用就只能通过桥接一层。</p>
<p>我们先通过创建一个继承 UIViewRepresentable 协议的自定义结构体，然后再开始实现对应的功能。该协议允许我们创建一个包装 UIKit 视图控制器的 SwiftUI 视图：</p>
<p>首先导入三个需要用到的框架：</p>
<p>arduino</p>
<p>复制代码</p>
<p><code>import SwiftUI import UIKit import SafariServices</code></p>
<p>然后创建自定义的 <code>SFSafariView</code>:</p>
<p>swift</p>
<p>复制代码</p>
<p><code>struct MySFSafariView: UIViewControllerRepresentable &#123;          let url: URL     func makeUIViewController(context: UIViewControllerRepresentableContext&lt;Self&gt;) -&gt; SFSafariViewController &#123;         return SFSafariViewController(url: url)     &#125;     func updateUIViewController(_ uiViewController: SFSafariViewController, context: UIViewControllerRepresentableContext&lt;MySFSafariView&gt;) &#123;              &#125; &#125;</code></p>
<p>要自定义一个 SwiftUI 中桥接 UIKit 的 View，首先要继承 <code>UIViewControllerRepresentable</code> 协议，然后必须要实现协议中的两个方法：</p>
<ol>
<li><p><code>makeUIViewController(context: )</code> 方法将调用它来创建 <code>UIViewController</code> 实例</p>
</li>
<li><p><code>updateUIViewController(_ : context: )</code> 方法将调用它以使用来自 SwiftUI 的数据以更新 <code>UIViewController</code> 的状态</p>
</li>
</ol>
<p>在我们的例子中，我只是简单的创建了一个 <code>SFSafariViewController</code> 对象，实际中你可以根据需求来增加功能。</p>
<h3 id="创建可重用的视图修饰符"><a href="#创建可重用的视图修饰符" class="headerlink" title="创建可重用的视图修饰符"></a>创建可重用的视图修饰符</h3><p>为了以后可以重复使用这个 View，我们再来创建一些可重用的视图修饰符 ViewModifier，便于使用 openURL 打开一个链接：</p>
<p>swift</p>
<p>复制代码</p>
<p><code>extension Binding where Value == Bool &#123;     init(binding: Binding&lt;(some Any)?&gt;) &#123;         self.init(             get: &#123;                 binding.wrappedValue != nil             &#125;,             set: &#123; newValue in                 guard newValue == false else &#123; return &#125;                 binding.wrappedValue = nil             &#125;         )     &#125; &#125; extension Binding &#123;     func mappedToBool&lt;Wrapped&gt;() -&gt; Binding&lt;Bool&gt; where Value == Wrapped? &#123;         Binding&lt;Bool&gt;(binding: self)     &#125; &#125; private struct SafariViewControllerViewModifier: ViewModifier &#123;     @State private var urlToOpen: URL?     func body(content: Content) -&gt; some View &#123;         content             .environment(\.openURL, OpenURLAction &#123; url in                 urlToOpen = url                 return .handled             &#125;)             .sheet(isPresented: $urlToOpen.mappedToBool(), onDismiss: &#123;                 urlToOpen = nil             &#125;, content: &#123;                 MySFSafariView(url: urlToOpen!)             &#125;)     &#125; &#125;</code></p>
<p>我们使用视图修饰符来捕获任何传入的 URL，并将它们用作 sheet 的输入。这个新的 Sheet 使用我们之前创建 MySFSafariView 的 URL 在应用程序内显示 SFSafariViewController。</p>
<h3 id="在-SwiftUI-中展示-SFSafariViewController"><a href="#在-SwiftUI-中展示-SFSafariViewController" class="headerlink" title="在 SwiftUI 中展示 SFSafariViewController"></a>在 SwiftUI 中展示 SFSafariViewController</h3><p>我们先给 View 写一个扩展方法，以使用刚刚写好的视图修饰符：</p>
<p>scss</p>
<p>复制代码</p>
<p><code>extension View &#123;     func handleOpenURLUseSafariView() -&gt; some View &#123;         modifier(SafariViewControllerViewModifier())     &#125; &#125;</code></p>
<p>现在我们已经写好了所有逻辑，现在可以开始在 SwiftUI 中展示任何传入的 URL 的视图了。</p>
<p>css</p>
<p>复制代码</p>
<p><code>struct ContentView: View &#123;     var body: some View &#123;         VStack &#123;             Link(&quot;打开 Apple 官网&quot;, destination: URL(string: &quot;https://www.apple.com&quot;)!)                 . handleOpenURLUseSafariView()         &#125;     &#125; &#125;</code></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d7682d4265345838b68ef13abb1117f~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=600&h=1225&s=94807&e=png&b=fdfdfd"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>点击之后可以看到能够正常展示 <code>SFSafariViewController</code>:</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7095624c0f914ed09efe10e86d991d19~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=600&h=1221&s=221645&e=png&b=070707"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是使用 SwiftUI 展示 <code>SFSafariViewController</code> 的内容了，而且我们还对代码进行了封装，以后再有类似的需求，只需要在有链接的 View 上使用 <code>.handleOpenURLUseSafariView()</code> 方法即可。</p>
<p><strong>这里每天分享一个 iOS 的新知识，快来关注我吧</strong></p>
<blockquote>
<p>本文同步自微信公众号 “<a href="https://link.juejin.cn/?target=https://mp.weixin.qq.com/s/7EwzlCrUVhkLLCUZcna3rg" title="https://mp.weixin.qq.com/s/7EwzlCrUVhkLLCUZcna3rg">iOS新知</a>”，每天准时分享一个新知识，这里只是同步，想要及时学到就来关注我吧！</p>
</blockquote>
<p>本文转自 <a href="https://juejin.cn/post/7381413498003619851">https://juejin.cn/post/7381413498003619851</a>，如有侵权，请联系删除。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>夏至已至</title>
    <url>/2024/06/21/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/%E5%A4%8F%E8%87%B3%E5%B7%B2%E8%87%B3/</url>
    <content><![CDATA[<p>夏至已至  </p>
<p>今日夏至——乃一年中“日最长”，“夜最短”之日。在夜读的文章里看到“夏至”乃阳气极致之日，也是从这一日起，日会一日比前一日稍短，而“夜会稍长”——直至冬至再次反转！</p>
<p>四季轮换，真是妙不可言——只有那些植物的生物钟，会在最恰当的温度，湿度，风水下达到“强盛”…</p>
<p>这篇夜读的文章里，不仅写气候、写风景——毕竟天气的冷暖交替，人是最有深切体会的…</p>
<p>夏至正值“江南地区”的梅雨季——这湿漉漉，黏糊糊的体感，着实不叫人喜欢…</p>
<p>但是作者，显然看得深远——至少他&#x2F;她认为“心净”，在很大程度上，可以减缓身体对于暑气的难耐…</p>
<p>今日大众已经都习惯，在空调间里，营造出如春天般的温度…</p>
<p>这在作者形容的那个自然的夏至时节——却有点不同…</p>
<p>他&#x2F;她写:夏风、池塘的荷花，夜里的蝉鸣，晴朗时，天际那一轮挂在寰宇的明月，与印在水里的月亮——正遥遥相望…</p>
<p>许璟</p>
<p>本文转自 <a href="https://www.jianshu.com/p/fd72a3ca6ceb">https://www.jianshu.com/p/fd72a3ca6ceb</a>，如有侵权，请联系删除。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>夏至已至</title>
    <url>/2024/06/21/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/%E5%B9%B8%E7%A6%8F%E7%94%9F%E6%B4%BB%E7%9A%84%E4%B8%8A%E4%B8%8A%E7%AD%BE/</url>
    <content><![CDATA[<p>文&#x2F;马勇</p>
<p>人人都希望自己能拥有生活的幸福，幸福生活的上上签是自己哄自己。</p>
<p>无论生活多么紧张，无论生活多么窘迫，无论心情多么的失落，都别忘了，自己是自己最有力的靠山，适时的哄哄自己是幸福生活的上上签。</p>
<p>当心情不愉快的时候，当情绪低落的时候，别忘了自己哄哄自己，自己给自己温暖，自己给自己力量。我们可以给自己唱一首自己喜欢的歌，哪怕把自己唱哭，都无所谓，在这首歌里平复自己的情绪，在记忆的歌谣里重拾信心，对未来充满希望，让自己回归自然，吹吹风，看看云，听听鸟鸣……让大自然给自己无限的能量。</p>
<p>当生活或工作处于低谷的时候，不要抱怨，不要彷徨，别忘了自己是自己的解药，自己哄哄自己，是幸福生活的上上签。给自己做一顿最喜欢吃的饭菜，毕竟辛苦了这么多年，停下来为自己做一道美食也是很幸福的事，在做饭的过程中忘掉所有的烦恼，这顿饭是新生活的开始，自己敬自己一杯酒，好好体会生活的酸甜苦辣，辛辛苦苦的过日子，和自己轻轻的说一声：辛苦了，谢谢你这么有毅力，这么有勇气，这么能吃苦，这么有耐力，你是最棒的，我从心里敬佩你。来，喝了这杯酒，祝你，今后一帆风顺，前程似锦。</p>
<p>无论生活多么苦，无论条件多么差，对着镜子好好看看自己，对自己笑笑，拍拍自己的脸，对自己说：这些年，你真的不容易，今天，我要买个礼物送给你，你一定会喜欢的痛哭流涕，因为这个礼物你喜欢了好久好久都没有舍得买，今天，我买给你，实现你的梦想。</p>
<p>买一本自己渴望已久的书，或者买一个自己盼望已久的小饰品，或者买一件自己多次下决心都没有舍得买的新衣服……余生很贵，请善待自己，哄自己开心也是一种智慧，更是一种美德。</p>
<p>当觉得自己真得山穷水尽的时候，当觉得流年失去光彩的时候，自己握着自己的手，邀自己去户外走走，自己对自己说：亲爱的，春夏秋冬，每季都是美丽的风景，为了生活，每天风雨兼程，错过了许许多多美丽的风景，今天，我陪着你去看，好好体会一下大自然的乐趣！</p>
<p>哄自己开心真得很重要，自己和自己谈心，自己给自己解愁，自己给自己点赞，自己给自己写评语，自己给自己打分，自己给自己加油。</p>
<p>自己在自己面前不用伪装，可以哭，可以笑，可以唱，可以呐喊，可以好好睡一觉，也可以一醉解千愁……无论以哪种方式发泄，都记得自己哄哄自己，让自己开心，让自己幸福，莫愁前路无知己，天下谁人不识我，我是风，我是雨，我是高山，我是流水……世界因我而起，我是美的化身，优雅的活着是我人生的座右铭。</p>
<p>哄自己不是无能，爱自己才是真英雄，记住：这个世界上唯一靠的住，值得信赖的人就是自己，自己对自己最忠诚，自己永远都不会背叛自己。</p>
<p>红尘滚滚，世态炎凉，唯有哄自己是幸福生活的上上签。</p>
<p>本文转自 <a href="https://www.jianshu.com/p/b68241bc4dea">https://www.jianshu.com/p/b68241bc4dea</a>，如有侵权，请联系删除。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>养生/me</title>
    <url>/2024/06/22/%E5%85%BB%E7%94%9F/%E5%85%BB%E7%94%9F-me/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>养生</category>
      </categories>
  </entry>
  <entry>
    <title>接口规范纪要</title>
    <url>/2024/06/22/iOS/%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83%E7%BA%AA%E8%A6%81/</url>
    <content><![CDATA[<h3 id="HTTP请求一般采用GET-和-POST"><a href="#HTTP请求一般采用GET-和-POST" class="headerlink" title="HTTP请求一般采用GET 和 POST:"></a>HTTP请求一般采用GET 和 POST:</h3><ul>
<li>GET 请求参数格式为Key&#x3D;Value</li>
<li>POST请求参数格式为JSON</li>
</ul>
<h3 id="响应数据格式"><a href="#响应数据格式" class="headerlink" title="响应数据格式"></a>响应数据格式</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>   <span class="comment">// 0为成功 | 小于0为失败 | 大于0为成功且其他某种状态</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;失败原因&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span> <span class="comment">// 数据 为空时为null </span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>成功:</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;请求成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LEE&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">27</span></span><br><span class="line">     <span class="punctuation">&#125;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>失败:</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">-9999</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;身份鉴权无效&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="其他个例"><a href="#其他个例" class="headerlink" title="其他个例"></a>其他个例</h3><p>时间数据类型 使用毫秒单位时间戳 (整型)</p>
<ul>
<li>建议:</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="number">153442323000</span>    <span class="comment">// ms</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>金额数据类型 使用分单位 (整型)</p>
<ul>
<li>建议:</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">1200</span>    <span class="comment">// 12元 = 1200分</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>是与否数据类型 使用0或1 (整型)</p>
<ul>
<li>不建议:</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;isVip&quot;</span><span class="punctuation">:</span> <span class="number">0</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>建议:</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vip&quot;</span><span class="punctuation">:</span> <span class="number">0</span>    <span class="comment">// 0: 不是会员, 1: 是会员 </span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>状态(State)或类型(Type)数据类型 使用1, 2, 3, 4… (整型)</p>
<ul>
<li>建议:</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>    <span class="comment">// 1: xxx, 2: xxx, 3: xxx</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">2</span>      <span class="comment">// 1: xxx, 2: xxx, 3: xxx</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>数组数据类型 为空则使用 []</p>
<ul>
<li>不建议:</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>建议:</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>字段命名遵循驼峰命名法, 且不进行冗余命名. 例如:</p>
<ul>
<li>不建议:</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;xxxx&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xxxx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xxx_xxxx_xx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;video&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;videoCode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;videoName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;videoImage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>建议:</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;xxxx&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xxxx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;video&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>字段命名保持统一风格, 相同类型或含义的字段名风格保持统一</p>
<ul>
<li>不建议:</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;xxImg&quot;</span><span class="punctuation">:</span><span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xxPic&quot;</span><span class="punctuation">:</span><span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xxImage&quot;</span><span class="punctuation">:</span><span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xxPicture&quot;</span><span class="punctuation">:</span><span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xxPhoto&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xxImgUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xxPicURL&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xx&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">&quot;xxNum&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xxCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xxNumber&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>所有可能为null 或者可能不存在的字段需在文档中用注释标明 (不标注的默认认为不会为空)</p>
<ul>
<li>建议:</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;xxxx&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xxxx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span>        </span><br><span class="line">    <span class="attr">&quot;video&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>             </span><br><span class="line">        <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span>    </span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span><span class="punctuation">,</span>    <span class="comment">// 无xx时为空字符串</span></span><br><span class="line">        <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxx&quot;</span>    <span class="comment">// 无xx时为null</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>个数 数量的数据类型使用整型</p>
<ul>
<li>不建议:</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;xxCount&quot;</span><span class="punctuation">:</span> <span class="string">&quot;122&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xxNumber&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2333&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>建议:</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">    <span class="attr">&quot;xxCount&quot;</span><span class="punctuation">:</span> <span class="number">122</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xxNumber&quot;</span><span class="punctuation">:</span> <span class="number">2333</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>百分比数据类型使用整型</p>
<ul>
<li>建议:</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;progress&quot;</span><span class="punctuation">:</span> <span class="number">98</span>    <span class="comment">// 进度百分比 0 - 100 </span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>本文转自 <a href="https://www.jianshu.com/p/c384a0320ccb">https://www.jianshu.com/p/c384a0320ccb</a>，如有侵权，请联系删除。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>LEETheme优雅的主题管理库</title>
    <url>/2024/06/22/iOS/LEETheme%E4%BC%98%E9%9B%85%E7%9A%84%E4%B8%BB%E9%A2%98%E7%AE%A1%E7%90%86%E5%BA%93/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于日间夜间模式切换 , 多种色调主题切换 , 这类的需求可以说在阅读社交类APP中屡见不鲜了 , 但如何能更方便的实现这一需求呢? 不要说给每个自定义的view神马的加个通知 然后在通知事件里设置各种属性的颜色图片等等 , NO , 那不是一个好的Coder该做的事 , 我们应该追求用最简单的方式去完成最繁琐的事 , 正是出于这些原因 , 我开发了这个主题管理库 今天开源出来分享给大家 —– <a href="https://link.jianshu.com/?t=https://github.com/lixiang1994/LEETheme">LEETheme</a></p>
<h2 id="LEETheme"><a href="#LEETheme" class="headerlink" title="LEETheme"></a><a href="https://link.jianshu.com/?t=https://github.com/lixiang1994/LEETheme">LEETheme</a></h2><p>什么是LEETheme ? 它是一个轻量级主题管理开源库 , 完美的适配系统版本差异 , 拥有良好的兼容性 , 任何对象都可以支持 , 优雅的使用方式 , 相比传统多主题处理方式而言 , LEETheme 只需一句代码 即可完成对象多样式的操作.</p>
<hr>
<h1 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h1><p><img src="//upload-images.jianshu.io/upload_images/1335095-8531a1676fb44cc6.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/320/format/webp"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>朋友圈Demo演示</p>
<hr>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>LEETheme 提供了两种设置方式 这里做一下简单的演示:</p>
<h5 id="独立设置方式"><a href="#独立设置方式" class="headerlink" title="独立设置方式"></a>独立设置方式</h5><p>独立设置方式是对某一对象属性进行单独的配置 , 例如下面的例子 , 对view对象添加背景颜色 其中传入了2个参数 <code>(@&quot;主题标签&quot; , [该主题标签对应的color值])</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">self<span class="selector-class">.view</span><span class="selector-class">.lee_theme</span><span class="selector-class">.LeeAddBackgroundColor</span>(DAY , <span class="selector-attr">[UIColor whiteColor]</span>)<span class="selector-class">.LeeAddBackgroundColor</span>(NIGHT , <span class="selector-attr">[UIColor blackColor]</span>);</span><br></pre></td></tr></table></figure>

<p>增加换行后 格式更加清晰</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">self<span class="selector-class">.view</span><span class="selector-class">.lee_theme</span></span><br><span class="line"><span class="selector-class">.LeeAddBackgroundColor</span>(DAY , <span class="selector-attr">[UIColor whiteColor]</span>)</span><br><span class="line"><span class="selector-class">.LeeAddBackgroundColor</span>(NIGHT , <span class="selector-attr">[UIColor blackColor]</span>);</span><br></pre></td></tr></table></figure>

<h6 id="标识符设置方式"><a href="#标识符设置方式" class="headerlink" title="标识符设置方式"></a>标识符设置方式</h6><p>标识符设置方式是通过添加不同主题的JSON配置信息再为某对象设置指定标识符来实现切换的 , 下面模拟个例子:</p>
<p>json的标准格式:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;identifier1(唯一标识符)&quot;</span><span class="punctuation">:</span> <span class="string">&quot;十六进制颜色值&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;identifier2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#000000&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;identifier3(唯一标识符)&quot;</span><span class="punctuation">:</span> <span class="string">&quot;图片名称&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;identifier4&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lee.png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>我有这样的两个json:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;backgroundcolor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F0F0F0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;textcolor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#000000&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ident1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lee.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ident2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lee帅.png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>第二个json:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;backgroundcolor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;textcolor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#808080&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ident1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我爱LEE.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ident2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;LEE爱我.jpg&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>下面我们分别调用添加json的方法来讲这2个json添加给LEETheme:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加json设置数据 , 设置主题标签 , 设置资源路径(如果资源路径为nil 默认会在mainBundle中查询所需资源)</span></span><br><span class="line">[<span class="meta">LEETheme addThemeConfigWithJson:第一个json Tag:@<span class="string">&quot;day&quot;</span> ResourcesPath:nil</span>];</span><br><span class="line"></span><br><span class="line">[<span class="meta">LEETheme addThemeConfigWithJson:第二个json Tag:@<span class="string">&quot;night&quot;</span> ResourcesPath:nil</span>];</span><br></pre></td></tr></table></figure>

<p>通过上面的代码可以很清楚的看出 , 我添加了一个json , 并设置主题标签为@”day” 那么也就是说第一个json 它对应的就是@”day”标签主题的配置信息 , 多主题情况依次类推.</p>
<p>添加好JSON的配置信息后 , 接下来我们只要为需要根据主题变化的对象设置标识符就可以了:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置背景颜色的标识符 , 这个标识符和你的json文件中配置的标识符对应</span></span><br><span class="line"><span class="keyword">self</span>.view.lee_theme.LeeConfigBackgroundColor(<span class="string">@&quot;backgroundcolor&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这样只要为这些对象设置好对应的属性的标识符 , 那么当主题变换的时候 它就会自动根据相应主题JSON中的标识符的值进行设置.</p>
<h4 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h4><p>切换主题非常简单 只需要调用下面的方法 传入你要启用的主题的标签就可以了.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//启用主题</span></span><br><span class="line">[<span class="meta">LEETheme startTheme:@<span class="string">&quot;day&quot;</span></span>];</span><br></pre></td></tr></table></figure>

<p>这里建议使用时在<code>didFinishLaunchingWithOptions</code>代理方法中设置一下默认主题 , 这样在APP第一次开启时启用默认主题.</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置默认主题</span></span><br><span class="line">[<span class="meta">LEETheme defaultTheme:@<span class="string">&quot;day&quot;</span></span>];</span><br></pre></td></tr></table></figure>

<p>当然如果你重新打开APP , 那么LEETheme会自动启用上一次使用的主题.</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><a href="https://link.jianshu.com/?t=https://github.com/lixiang1994/LEETheme">LEETheme</a>是一个非常实用的主题管理库 , 总共只有2个文件 , 它所提供的两种不同设置方式可以满足绝大部分Coder的需求 , 可以很方便的实现多主题切换操作 , 当然不仅可以实现本地固定的主题样式切换 , 利用标识符设置方式也可以实现网络主题切换的功能 , 具体详细的使用示例我会在demo中逐一体现 , 除了强大功能外 所采用的链式语法还让你的代码更加优雅 , 好了 , 今天就介绍到这里 , 更多详细的使用示例请灰到<a href="https://link.jianshu.com/?t=https://github.com/lixiang1994/LEETheme">Github</a>上查看.</p>
<blockquote>
<p>我是LEE , 一枚有信仰的果粉Coder , 如果喜欢记得关注哦 亲 ~ 么了个哒 </p>
</blockquote>
<p>本文转自 <a href="https://www.jianshu.com/p/dc7ab3a3e8f8">https://www.jianshu.com/p/dc7ab3a3e8f8</a>，如有侵权，请联系删除。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
  <entry>
    <title>使用UITableViewDelegate代理方法来设置header或footer时要注意的细节</title>
    <url>/2024/06/22/iOS/%E4%BD%BF%E7%94%A8UITableViewDelegate%E4%BB%A3%E7%90%86%E6%96%B9%E6%B3%95%E6%9D%A5%E8%AE%BE%E7%BD%AEheader%E6%88%96footer%E6%97%B6%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>使用<code>UITableViewDelegate</code>代理方法来设置<code>header</code>或<code>footer</code>时要注意了。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">UIView</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView viewForFooterInSection:(<span class="built_in">NSInteger</span>)section &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">UIView</span> new];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForFooterInSection:(<span class="built_in">NSInteger</span>)section &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">UIView</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView viewForHeaderInSection:(<span class="built_in">NSInteger</span>)section &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">UIView</span> new];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForHeaderInSection:(<span class="built_in">NSInteger</span>)section &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>UITableView</code>在<code>UI</code>布局中使用的场景很多，比如下图：  </p>
<p><img src="//upload-images.jianshu.io/upload_images/3096256-c2095f8ecf25842c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1125/format/webp" alt="image.png"  data-tag='post-image' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>使用场景：让<code>UITableView</code>的<code>contentSize</code>的高度和父控件的高度一致。</p>
<ul>
<li>没有使用分组（即没有设置<code>header</code>或<code>footer</code>），这个时候通过获取<code>UITableView</code>的<code>contentSize</code>的高度来设置父控件的高度，显示出来的效果是正常的；</li>
<li>⚠️⚠️使用了分组（即设置了<code>header</code>或<code>footer</code>），这个时候通过获取<code>UITableView</code>的<code>contentSize</code>的高度来设置父控件的高度，显示出来的效果是不正常的；</li>
</ul>
<h1 id="剖析"><a href="#剖析" class="headerlink" title="剖析"></a>剖析</h1><p>举例：当我们使用<code>UITableViewDelegate</code>代理方法来设置<code>footer</code>时，先调用<br><code>- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section;</code>，<br>然后调用<br><code>- (UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section;</code>，<br>但是当我们设置<code>footer</code>的高度为<code>0</code>或<code>CGFLOAT_MIN</code>时，执行完<br><code>- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section;</code>，<br>就不会调用<br><code>- (UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section;</code>，<br>所以这个时候通过获取<code>UITableView</code>的<code>contentSize</code>的高度来设置父控件的高度，显示出来的效果是不正常了。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>当我们使用<code>UITableViewDelegate</code>代理方法来设置<code>header</code>或<code>footer</code>时，尽量不要给<code>header</code>或<code>footer</code>的高度设为<code>0</code>或<code>CGFLOAT_MIN</code>，应该设置一个很小的高度，<code>eg</code>：<code>1</code>，<code>2...</code>。</p>
<p>本文转自 <a href="https://www.jianshu.com/p/57cd980a1706">https://www.jianshu.com/p/57cd980a1706</a>，如有侵权，请联系删除。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
  </entry>
</search>
